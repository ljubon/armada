# Pre-merge TODO list
# 1. Change hub.docker.com account (repository)
# 2. Update SSH credentials (use old ones from config.yml)
# 3. Token for publishing release
name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: 
  push:
    tags: 
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: "on"
    container:
      image: cimg/go:1.16.2
      options: --user root
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Build armadactl release artifacts
        run: |
          TAG=${GITHUB_REF##*/}
          echo $TAG
          pwd
          make build-armadactl-release RELEASE_VERSION=${TAG}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            ${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*

      - run: echo "${GITHUB_REF##*/}"

      - name: Upload artifacts to Github release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: "${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*"
          token: ${{ secrets.RELEASE_TOKEN }}
          # tag: v0.1.45
          # commit: "${GITHUB_REF##*/}"

      - name: Set .ssh directory and GIT_SSH_COMMAND
        run: |
          echo 'SSH_CONFIG_DIR="/home/runner/.ssh"' >> $BASH_ENV
          echo 'GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=$SSH_CONFIG_DIR/known_hosts"' >> $BASH_ENV
          source $BASH_ENV
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Create known_hosts file for github.com #TODO
        run: |
          mkdir -p $SSH_CONFIG_DIR
          echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClI5HsKxVRM7smlKAcW3Zod+qe5I1kPfFynFia1mVw2N2qogxNLVLXD/BIUuHrB9Si7SxBj7rRdZgVuQoj6zexo/VyBIyJbWE4q218FaVDbmZ/Wa9ewZvwJCXa8VXPk8FWaHbZAtXlnL1/qD8InAFtmS9CES+xSLWfOtczxWF3oMDi9uxSjlhutr2gjsvaDxIwuR+yDnJp9lDT7q5wCcML6Tk9niOoYNtRgrN1ovfqvLXZUm5vYld7IX9q3i2VgQ5776cPELX20gpQu1wsjhWRSvig3lAhl2qMxkAN2d1ATDacD2ewsNGUg+VV0ThY3loeEwcPMErgjNv3eI6UPupfW1qzPyBHMw4XY4TIQkYSwa5TR8NLdNM1DGkdotaYTbb/6nHHOC2DlpntDzImPBWpvQSy5Vl9zx0hRYWz6Q772g5agzwjMh76ry5lLsXpg0bp2dhPAOVXsUqOYrB5x4vdU/HiX3x/b30dGxPOnNm40YIRTW281W3iMMWg+TlgRWs= ljuboops@djoko' >> $SSH_CONFIG_DIR/known_hosts
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Clone the G-Research common charts repo
        run: |
          eval "$(ssh-agent -s)"
          echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
          git clone -q git@github.com:G-Research/charts.git
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada


      - name: Check the the Helm v3 client
        run: |
          echo "Helm version:" $(helm version --short)
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Update version, appVersion and image tag to match current $RELEASE_TAG
        run: |
          RELEASE_TAG=${GITHUB_REF##*/}
          echo release version is $RELEASE_TAG
          find . \( -name "Chart.yaml" -o -name "values.yaml" \) -exec sed -i s/LATEST/$RELEASE_TAG/ {} +
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Build new packages and index.yaml
        run: |
          helm package deployment/armada/ -d charts/armada/
          helm package deployment/executor -d charts/armada/
          helm package deployment/executor-cluster-monitoring/ -d charts/armada/
          helm package deployment/lookout/ -d charts/armada/
          helm package deployment/lookout-migration/ -d charts/armada/
          helm repo index charts/
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada


      # - name: Update version, appVersion and image tag to match current $RELEASE_TAG
      #   run: |
      #     RELEASE_TAG=${CIRCLE_TAG}
      #     cd charts
      #     git checkout -b circlci-armada_$RELEASE_TAG
      #     git add ./armada
      #     git -c user.name='GR OSS' -c user.email=github@gr-oss.io commit -qam "Pushing new helm charts at version $RELEASE_TAG"
      #     eval "$(ssh-agent -s)"
      #     echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
      #     git push -q origin HEAD
      #   with:
      #     path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      # - name: Archive production artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dist
      #     path: |
      #       bin/client/DotNet/*

  # release-dotnet-client:
  #   name: Release DotNet client
  #   needs: [build]
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: mcr.microsoft.com/dotnet/core/sdk:3.0.101-alpine3.10
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.16'
  #     - name: Set repo
  #       run: |
  #         mkdir -p $GOPATH/src/github.com/G-Research/armada
  #         cp -ar $GITHUB_WORKSPACE $GOPATH/src/github.com/G-Research/
  #         ls -larth $GOPATH/src/github.com/G-Research/armada/.

  #     - name: Release dotnet client
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         RELEASE_TAG=${CIRCLE_TAG#"v"}
  #         dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
  #         dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg -k ${NUGET_API_KEY} -s https://api.nuget.org/v3/index.json