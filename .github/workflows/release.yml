name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: 
  push:
    tags: 
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: "on"
      DOCKERHUB_PASS: ${{ secrets.DOCKERTOKEN }}
      DOCKERHUB_USER: ${{ secrets.DOCKERUSERNAME }}
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada
      
      - name: Build armadactl release artifacts
        run: |
          TAG=${GITHUB_REF##*/}
          make build-armadactl-release RELEASE_VERSION=${TAG}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts  
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*

      #### Publish release
      - name: Upload artifacts to Github release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: "${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*"
          token: ${{ secrets.RELEASE_TOKEN }}
          tag: ${{ github.event.release.tag_name }} 

      - name: Push Release Image
        run: |
          if [ -z "${DOCKERHUB_USER}" ]
            then
              echo "Do not push image inside fork."
              exit 0
          fi

          TAG=${GITHUB_SHA}
          RELEASE_TAG=${GITHUB_REF##*/}

          echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

          docker pull ljubon/armada-server-dev:${TAG}
          docker tag ljubon/armada-server-dev:${TAG} ljubon/armada-server:${RELEASE_TAG}
          docker push ljubon/armada-server:${RELEASE_TAG}

          docker pull ljubon/armada-executor-dev:${TAG}
          docker tag ljubon/armada-executor-dev:${TAG} ljubon/armada-executor:${RELEASE_TAG}
          docker push ljubon/armada-executor:${RELEASE_TAG}

          docker pull ljubon/armada-armadactl-dev:${TAG}
          docker tag ljubon/armada-armadactl-dev:${TAG} ljubon/armada-armadactl:${RELEASE_TAG}
          docker push ljubon/armada-armadactl:${RELEASE_TAG}

          docker pull ljubon/armada-lookout-dev:${TAG}
          docker tag ljubon/armada-lookout-dev:${TAG} ljubon/armada-lookout:${RELEASE_TAG}
          docker push ljubon/armada-lookout:${RELEASE_TAG}

          docker pull ljubon/armada-binoculars-dev:${TAG}
          docker tag ljubon/armada-binoculars-dev:${TAG} ljubon/armada-binoculars:${RELEASE_TAG}
          docker push ljubon/armada-binoculars:${RELEASE_TAG}

          rm -v /home/runner/.docker/config.json
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  update-charts:
    needs: [release]
    name: Publish Armada charts
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Armada
        uses: actions/checkout@v2
        with:
          repository: ljubon/armada
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Update version, appVersion and image tag to match current $RELEASE_TAG
        run: |
          mkdir -p ${{ env.GOPATH }}/src/github.com/G-Research/charts
          mkdir -p $HOME/.ssh && echo "test" > $HOME/.ssh/known_hosts
          echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqvzAKi2JmyuqM3STjgKbK3nTJAc9aSPwqtjVqEql3ytITmyYGoUjnyRL+64loTDK2lifkfi2ypDXFLefWp3OVW/hedDd2/AaW1F4PbUzje/7xF7jnHlRyNPrirDdXy9+MqLACQ+8ulqH8tBnKr5zEow6Gu4uqHbP6RYOQv+etDZ528VNSlamz93FtLKCaN5wNFAIvpBPiJTsHEhs2FqsYUrIzN/6izjlM1ZQAhy6ooE6CM0ltcZN2uN2SsSegD90fwQKans+oFtOQyyPd6ByA5wt3pEDBp69KcTFthcBDhiT8BwvpqjcH5TruBhMq8WN0At1A0AljsozwzUgJM5tN ljubo.nikolic" > $HOME/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          echo -e "${{ secrets.LJUBON_ARMADA_CHART_UPDATE_KEY }}" | ssh-add - > /dev/null
          git clone -q git@github.com:ljubon/charts.git charts/
          cd charts/
          git remote -v

          RELEASE_TAG=${GITHUB_REF##*/}
          echo release version is $RELEASE_TAG
          find ../armada \( -name "Chart.yaml" -o -name "values.yaml" \) -exec sed -i s/LATEST/$RELEASE_TAG/ {} +

          helm package ../armada/deployment/armada/ -d armada/
          helm package ../armada/deployment/executor -d armada/
          helm package ../armada/deployment/executor-cluster-monitoring/ -d armada/
          helm package ../armada/deployment/lookout/ -d armada/
          helm package ../armada/deployment/lookout-migration/ -d armada/
          helm package ../armada/deployment/binoculars/ -d armada/
          helm repo index .
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research

      - name: Commit and push updated charts
        run: |
          RELEASE_TAG=${GITHUB_REF##*/}
          git checkout -b github-armada_$RELEASE_TAG
          git add ./armada index.yaml
          git -c user.name='Ljubo Nikolic' -c user.email="ljubonikolic@gmail.com" commit -qam "Pushing new helm charts at version $RELEASE_TAG"
          eval "$(ssh-agent -s)"
          echo -e "${{ secrets.LJUBON_ARMADA_CHART_UPDATE_KEY }}" | ssh-add - 
          git push -q origin HEAD
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/charts

  release-dotnet-client:
    name: Release DotNet client
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.0.101' 
          source-url: "https://nuget.pkg.github.com/ljubon/index.json"
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.PAT_LJUBOOPS }}

      - name: Release dotnet client
        run: |
          RELEASE_TAG_RAW=${GITHUB_REF##*/}
          RELEASE_TAG=${RELEASE_TAG_RAW:1}

          echo $RELEASE_TAG
          cat /home/runner/work/armada/nuget.config
          dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
          dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg --api-key ${{ secrets.PAT_LJUBOOPS }}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/bin/client/DotNet/*
