name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"
  GOVERSION: "1.16"

on: 
  push:
    tags: 
      - 'v*'

jobs:
  invoke-push:
    uses: ljubon/charts/.github/workflows/invoke-push.yaml@INTERNAL-master
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.GH_APP_PEM }}

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code into the Go module directory
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ env.GOVERSION }}

  #     - name: Build armadactl release artifacts
  #       run: make build-armadactl-release RELEASE_VERSION=${GITHUB_REF##*/}
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*

  #     #### Publish release
  #     - name: Upload artifacts to Github release
  #       uses: ncipollo/release-action@v1.8.6
  #       with:
  #         artifacts: "${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         tag: ${{ github.event.release.tag_name }} 

  # release-docker:
  #   name: Push Docker images
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       include:
  #       - devImage: "ljubon/armada-server-dev"
  #         releaseImage: "ljubon/armada-server"
  #       - devImage: "ljubon/armada-executor-dev"
  #         releaseImage: "ljubon/armada-executor"
  #       - devImage: "ljubon/armada-armadactl-dev"
  #         releaseImage: "ljubon/armada-armadactl"
  #       - devImage: "ljubon/armada-lookout-dev"
  #         releaseImage: "ljubon/armada-lookout"
  #       - devImage: "ljubon/armada-binoculars-dev"
  #         releaseImage: "ljubon/armada-binoculars"
  #   steps:
  #     - name: Checkout code into the Go module directory
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Push Release Image
  #       if: ${{ !github.event.repository.fork }}
  #       env:
  #         DOCKERHUB_PASS: ${{ secrets.DOCKERTOKEN }}
  #         DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  #         RELEASE_TAG: ${GITHUB_REF##*/}
  #         TAG: ${GITHUB_SHA}
  #       run: |
  #         echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

  #         docker pull ${{ matrix.devImage }}:${{ env.TAG }}
  #         docker tag ${{ matrix.devImage }}:${{ env.TAG }} ${{ matrix.releaseImage }}:${{ env.RELEASE_TAG }}
  #         docker push ${{ matrix.releaseImage }}:${{ env.RELEASE_TAG }}

  #         rm -v /home/runner/.docker/config.json
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  # release-dotnet-client:
  #   name: Release DotNet client
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: '3.0.101' 
  #         source-url: "https://api.nuget.org/v3/index.json"
  #       env:
  #         NUGET_AUTH_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  #     - name: Release dotnet client
  #       run: |
  #         RELEASE_TAG_RAW=${GITHUB_REF##*/}
  #         RELEASE_TAG=${RELEASE_TAG_RAW:1}

  #         echo $RELEASE_TAG
  #         cat /home/runner/work/armada/nuget.config
  #         dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
  #         dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg -k ${{ secrets.RELEASE_TOKEN }} -s https://api.nuget.org/v3/index.json
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/bin/client/DotNet/*
