name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: 
  push:
    tags: 
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  # release:
  #   name: Release
  #   runs-on: ubuntu-20.04
  #   env:
  #     GO111MODULE: "on"
  #     DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
  #     DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  #   steps:
  #     - name: Checkout code into the Go module directory
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada
      
  #     - name: Build armadactl release artifacts
  #       run: |
  #         TAG=${GITHUB_REF##*/}
  #         make build-armadactl-release RELEASE_VERSION=${TAG}
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Archive production artifacts  
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*

  #     #### Publish release
  #     - name: Upload artifacts to Github release
  #       uses: ncipollo/release-action@v1.8.6
  #       with:
  #         artifacts: "${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         tag: ${{ github.event.release.tag_name }} 

  #     - name: Push Release Image
  #       run: |
  #         if [ -z "${DOCKERHUB_USER}" ]
  #           then
  #             echo "Do not push image inside fork."
  #             exit 0
  #         fi

  #         TAG=${GITHUB_SHA}
  #         RELEASE_TAG=${GITHUB_REF##*/}

  #         echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin


  #         docker pull gresearchdev/armada-server-dev:${TAG}
  #         docker tag gresearchdev/armada-server-dev:${TAG} gresearchdev/armada-server:${RELEASE_TAG}
  #         docker push gresearchdev/armada-server:${RELEASE_TAG}

  #         docker pull gresearchdev/armada-executor-dev:${TAG}
  #         docker tag gresearchdev/armada-executor-dev:${TAG} gresearchdev/armada-executor:${RELEASE_TAG}
  #         docker push gresearchdev/armada-executor:${RELEASE_TAG}

  #         docker pull gresearchdev/armada-armadactl-dev:${TAG}
  #         docker tag gresearchdev/armada-armadactl-dev:${TAG} gresearchdev/armada-armadactl:${RELEASE_TAG}
  #         docker push gresearchdev/armada-armadactl:${RELEASE_TAG}

  #         docker pull gresearchdev/armada-lookout-dev:${TAG}
  #         docker tag gresearchdev/armada-lookout-dev:${TAG} gresearchdev/armada-lookout:${RELEASE_TAG}
  #         docker push gresearchdev/armada-lookout:${RELEASE_TAG}

  #         docker pull gresearchdev/armada-binoculars-dev:${TAG}
  #         docker tag gresearchdev/armada-binoculars-dev:${TAG} gresearchdev/armada-binoculars:${RELEASE_TAG}
  #         docker push gresearchdev/armada-binoculars:${RELEASE_TAG}

  #         rm -v /home/runner/.docker/config.json
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  # release-dotnet-client:
  #   name: Release DotNet client
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: '3.0.101' 
  #         source-url: "https://api.nuget.org/v3/index.json"
  #       env:
  #         NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

  #     - name: Release dotnet client
  #       run: |
  #         RELEASE_TAG_RAW=${GITHUB_REF##*/}
  #         RELEASE_TAG=${RELEASE_TAG_RAW:1}

  #         echo $RELEASE_TAG
  #         cat /home/runner/work/armada/nuget.config
  #         dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
  #         dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada/bin/client/DotNet/*

  update-charts:
    # needs: [release, release-dotnet-client]
    name: Publish Armada charts
    runs-on: ubuntu-20.04
    steps:
      - name: Install Step
        env: 
          VERSION: 0.15.16
        run: |
          curl -sLO https://github.com/smallstep/cli/releases/download/v${VERSION}/step-cli_${VERSION}_amd64.deb
          sudo dpkg -i step-cli_${VERSION}_amd64.deb
          rm step-cli_${VERSION}_amd64.deb

      - name: Acquire access token
        id: token
        env: 
          APP_ID: ${{ secrets.APP_ID }}
          APP_PEM: ${{ secrets.GH_APP_PEM }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}
        run: |
          echo "$APP_PEM" > key.pem
          trap "rm -f key.pem" EXIT
          APP_TOKEN=$(step crypto jwt sign --key key.pem --issuer $APP_ID --expiration $(date --date '+5 min' +'%s') --subtle </dev/null)
          ACCESS_TOKEN=$(curl -s -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization:Bearer $APP_TOKEN" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r '.token')
          echo "::set-output name=token::$ACCESS_TOKEN"

      - name: Publish chart - armada
        env: 
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          GH_WORKFLOW: "publish-charts.yaml" # workflow to execute 
          GH_CHART_REPO: "ljubon/charts" # owner/repo where charts are published 
          GH_PAGES_BRANCH: "feature/CI-publish-charts" # gh-pages
          REPO: "ljubon/armada" # Repository from where we want to build Charts
          REPO_REF: ${GITHUB_REF##*/} # The branch/tag that triggered the workflow
          REPO_CHART: |
            {
              "include": [
                {
                  "chart": "armada",
                  "src_path": "deployment/armada/",
                  "dst_path": "armada/"
                },
                {
                  "chart": "executor",
                  "src_path": "deployment/executor/",
                  "dst_path": "armada/"
                },
                {
                  "chart": "executor-cluster-monitoring",
                  "src_path": "deployment/executor-cluster-monitoring/",
                  "dst_path": "armada/"
                },
                {
                  "chart": "lookout",
                  "src_path": "deployment/lookout/",
                  "dst_path": "armada/"
                },
                {
                  "chart": "lookout-migration",
                  "src_path": "deployment/lookout-migration/",
                  "dst_path": "armada/"
                },
                {
                  "chart": "binoculars",
                  "src_path": "deployment/binoculars/",
                  "dst_path": "armada/"
                }
              ]
            }
        run: |
          gh workflow run $GH_WORKFLOW --repo $GH_CHART_REPO --ref $GH_PAGES_BRANCH \
            --field repo=${{ env.REPO }} \
            --field repo_ref=${{ env.REPO_REF }} \
            --field repo_chart="$REPO_CHART"

# helm package deployment/executor-cluster-monitoring -d ../../armada/
# Run helm package deployment/executor-cluster-monitoring -d ../../armada/
# Successfully packaged chart and saved it to: ../../armada/armada-executor-cluster-monitoring-v0.6.11.tgz

# helm package ${{ matrix.src_path }} -d ../../${{ matrix.dst_path }}
# helm package deployment/armada/ -d ../../armada/
# helm package deployment/executor -d ../../armada/
# helm package deployment/executor-cluster-monitoring/ -d ../../armada/
# helm package deployment/lookout/ -d ../../armada/
# helm package deployment/lookout-migration/ -d ../../armada/
# helm package deployment/binoculars/ -d ../../armada/
# helm repo index ../../
