name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: 
  push:
    tags: 
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: "on"
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERUSERNAME }}
          password: ${{ secrets.DOCKERTOKEN }}

      - name: Prepare build for lookout
        run: |
          npm install
          npm run openapi
          npm run build
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada/internal/lookout/ui/
      
      - name: Run GoReleaser #TODO change .gorelease.yml wiht G-Research info/registry
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
          workdir: ${{ env.GOPATH }}/src/github.com/G-Research/armada
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PAT: ${{ secrets.PAT }}

      - name: Clear
        if: always()
        run: rm -f ${HOME}/.docker/config.json

  release-dotnet-client:
    name: Release DotNet client
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.0.101' 
          source-url: "https://nuget.pkg.github.com/G-Research/index.json"
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: Release dotnet client
        run: |
          RELEASE_TAG_RAW=${GITHUB_REF##*/}
          RELEASE_TAG=${RELEASE_TAG_RAW:1}

          echo $RELEASE_TAG
          ls -larth
          cat /home/runner/work/armada/nuget.config
          dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
          dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg --api-key ${{ secrets.PAT }}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            ${{ env.GOPATH }}/src/github.com/G-Research/armada/bin/client/DotNet/*

  update-charts:
    needs: [release, release-dotnet-client]
    name: Publish Armada charts
    runs-on: ubuntu-20.04
    steps:
      - name: Install Step
        env: 
          VERSION: 0.15.16
        run: |
          curl -sLO https://github.com/smallstep/cli/releases/download/v${VERSION}/step-cli_${VERSION}_amd64.deb
          sudo dpkg -i step-cli_${VERSION}_amd64.deb
          rm step-cli_${VERSION}_amd64.deb

      - name: Acquire access token #TODO Change APP_ID, APP_PEM, INSTALLATION_ID
        id: token
        env: 
          APP_ID: ${{ secrets.APP_ID }}
          APP_PEM: ${{ secrets.GH_APP_PEM }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}
        run: |
          echo "$APP_PEM" > key.pem
          trap "rm -f key.pem" EXIT
          APP_TOKEN=$(step crypto jwt sign --key key.pem --issuer $APP_ID --expiration $(date --date '+5 min' +'%s') --subtle </dev/null)
          ACCESS_TOKEN=$(curl -s -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization:Bearer $APP_TOKEN" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r '.token')
          echo "::set-output name=token::$ACCESS_TOKEN"

      - name: Trigger remote workflow #TODO Change TOKEN, REPO, REF, project. There is no workflow in the G-Research/charts repo
        env: 
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          REPO: G-Research/charts
          REF: test-dispatcher
          WORKFLOW: gh-pages.yml
        run: |
          gh workflow run $WORKFLOW --repo $REPO --ref $REF --field project="G-Research/armada" --field ref="${GITHUB_REF##*/}"
