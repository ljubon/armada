# Pre-merge TODO list
# 1. change RELEASE_TOKEN
# 2. update CLONE_KEY used for clone/pushing changes
# 3. set NUGET_API_KEY
# 4. Change RepositoryUrl in client/DotNet/Armada.Client/Armada.Client.csproj
name: Release

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: 
  push:
    tags: 
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: "on"
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Build armadactl release artifacts
        run: |
          TAG=${GITHUB_REF##*/}
          echo $TAG
          make build-armadactl-release RELEASE_VERSION=${TAG}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts  
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            ${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*

      - name: Upload artifacts to Github release #TODO change RELEASE_TOKEN
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: "${{ env.GOPATH }}/src/github.com/G-Research/armada/dist/*"
          token: ${{ secrets.RELEASE_TOKEN }}
          tag: ${{ github.event.release.tag_name }} 

      - name: Update release summmary
        run: |
          ./scripts/add-checksum-summary.sh ${{ secrets.GITHUB_TOKEN }} ${GITHUB_REF##*/}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Checkout G-Research/Charts repo
        run: |
          echo "${{ secrets.CLONE_KEY }}" > id_rsa
          chmod 400 id_rsa
          ssh-agent bash -c 'ssh-add id_rsa; git clone -b gh-pages git@github.com:ljubon/charts.git'
          echo "Remove key..." && rm -fv id_rsa
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Update version, appVersion and image tag to match current $RELEASE_TAG
        run: |
          RELEASE_TAG=${GITHUB_REF##*/}
          echo release version is $RELEASE_TAG
          ls -larth ${{ env.GOPATH }}/src/github.com/G-Research/armada/charts
          find . \( -name "Chart.yaml" -o -name "values.yaml" \) -exec sed -i s/LATEST/$RELEASE_TAG/ {} +
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Build new packages and index.yaml
        run: |
          helm package deployment/armada/ -d charts/armada/
          helm package deployment/executor -d charts/armada/
          helm package deployment/executor-cluster-monitoring/ -d charts/armada/
          helm package deployment/lookout/ -d charts/armada/
          helm package deployment/lookout-migration/ -d charts/armada/
          helm repo index charts/
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Commit & Push changes #TODO Change CLONE_KEY, user.name, user.email
        run: |
          echo "${{ secrets.CLONE_KEY }}" > id_rsa
          chmod 400 id_rsa
          ls -larth

          git remote -v
          echo "Create branch: githubactions-armada_${GITHUB_REF##*/}"
          git checkout -b githubactions-armada_${GITHUB_REF##*/} 
          
          git add ./armada
          git -c user.name="Ljubo Nikolic" -c user.email="ljubonikolic@gmail.com" commit -qam "Pushing new helm charts at version ${GITHUB_REF##*/}"
          ssh-agent bash -c 'ssh-add id_rsa; git push -q origin HEAD'
          echo "Remove key..." && rm -fv id_rsa
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada/charts


  release-dotnet-client:
    name: Release DotNet client
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.0.101' 
          source-url: "https://nuget.pkg.github.com/ljubon/index.json"
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.PAT_LJUBOOPS }}

      - name: Release dotnet client #TODO change RepositoryUrl in *.csproj, replace PAT_LJUBOOPS
        run: |
          RELEASE_TAG_RAW=${GITHUB_REF##*/}
          RELEASE_TAG=${RELEASE_TAG_RAW:1}

          echo $RELEASE_TAG
          ls -larth
          cat /home/runner/work/armada/nuget.config
          dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
          dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg --api-key ${{ secrets.PAT_LJUBOOPS }}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            ${{ env.GOPATH }}/src/github.com/G-Research/armada/bin/client/DotNet/*

  update-charts:
    name: Update Armada charts
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Trigger G-Research/charts workflow
        run: |
          exec 5> >(logger -t $0)
          BASH_XTRACEFD="5"
          PS4='$LINENO: '
          set -x

          APP_ID="120461"
          INSTALATION_ID="17535497"
          WORKFLOW_FILE="gh-pages.yml"
          REPO="ljubon/charts"
          BRANCH="master"

          dd=$(($(date +'%s * 1000 + %-N / 1000000')))
          expiration=$(($dd + 300000))
          echo $expiration

          echo "Install step package" && sudo apt-get update -qq -y && sudo apt-get install -qq -y curl jq && \
          wget -q https://github.com/smallstep/cli/releases/download/v0.15.16/step-cli_0.15.16_amd64.deb && \
          sudo dpkg -i step-cli_0.15.16_amd64.deb

          echo "${{ secrets.GH_APP_PEM }}" > $(pwd)/gh_app.pem
          # chmod 400 $(pwd)/gh_app.pem
          ls -larth

          step-cli crypto jwt sign --key="$(pwd)/gh_app.pem" --iss ${APP_ID} --subtle --exp ${expiration}
          # APP_TOKEN=$(step-cli crypto jwt sign --key="$(pwd)/gh_app.pem" --iss $APP_ID --subtle --exp $expiration)
          # echo ${APP_TOKEN}

          # ACCESS_TOKEN=$(curl -s -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization:Bearer $APP_TOKEN" \ 
          #   https://api.github.com/app/installations/$APP_INSTALLATION_ID/access_tokens | jq -r .token)
          # echo $ACCESS_TOKEN

          # GH_TOKEN=$ACCESS_TOKEN gh workflow run $WORKFLOW_FILE --repo $REPO --ref $BRANCH
          # echo $GH_TOKEN
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada
