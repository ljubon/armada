
grpcPort: 50051
httpPort: 8080
metricsPort: 9000
corsAllowedOrigins: []
priorityHalfTime: 20m
redis:
  addrs:
    - "localhost:6379"
  password: ""
  db: 0
  poolSize: 1000
eventsRedis:
  addrs:
    - "localhost:6379"
  password: ""
  db: 0
  poolSize: 1000
auth:
  basicAuth:
    enableAuthentication: false
  anonymousAuth: true
  permissionGroupMapping:
    submit_jobs: ["everyone"]
    submit_any_jobs: ["everyone"]
    create_queue: ["everyone"]
    delete_queue: ["everyone"]
    cancel_jobs: ["everyone"]
    cancel_any_jobs: ["everyone"]
    reprioritize_jobs: ["everyone"]
    reprioritize_any_jobs: ["everyone"]
    watch_all_events: ["everyone"]
    execute_jobs: ["everyone"]
scheduling:
  useProbabilisticSchedulingForAllResources: true
  queueLeaseBatchSize: 200
  minimumResourceToSchedule:
    memory: 100000000 # 100Mb
    cpu: 0.25
  maximalClusterFractionToSchedule:
    memory: 0.25
    cpu: 0.25
  lease:
    expireAfter: 15m
    expiryLoopInterval: 5s
  maxRetries: 5
queueManagement:
  defaultPriorityFactor: 1000
eventsNats:
  queueGroup: "ArmadaEventRedisProcessor"
  jobStatusGroup: "ArmadaEventJobStatusProcessor"
eventsKafka:
  consumerGroupID: "KafkaEventRedisProcessor"
  jobStatusConsumerGroupID: "KafkaEventJobStatusProcessor"
eventRetention:
  expiryEnabled: true
  retentionDuration: 336h # Specified as a Go duration
metrics:
  refreshInterval: 10s
